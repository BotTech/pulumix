/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A plan of a Pulumi deployment.
 */
export interface PulumiPlan {
  manifest: DeploymentManifest;
  resourcePlans: DeploymentResourcePlans;
}
/**
 * Captures meta-information about a deployment, such as versions of binaries, etc.
 */
export interface DeploymentManifest {
  /**
   * The deployment's start time.
   */
  time: string;
  /**
   * A magic number used to validate the manifest's integrity.
   */
  magic: string;
  /**
   * The version of the Pulumi engine that produced the deployment.
   */
  version: string;
  /**
   * Information about the plugins used by the deployment.
   */
  plugins?: PluginInfo[];
}
/**
 * Information about a plugin.
 */
export interface PluginInfo {
  /**
   * The plugin's name.
   */
  name: string;
  /**
   * The path of the plugin's binary.
   */
  path: string;
  /**
   * The plugin's type.
   */
  type: "analyzer" | "language" | "resource";
  /**
   * The plugin's version.
   */
  version: string;
}
/**
 * A map from the resource URN to the plan for that resource.
 */
export interface DeploymentResourcePlans {
  [k: string]: DeploymentResourcePlan;
}
/**
 * The plan for a resource.
 *
 * This interface was referenced by `DeploymentResourcePlans`'s JSON-Schema definition
 * via the `patternProperty` "^urn:".
 */
export interface DeploymentResourcePlan {
  /**
   * The goal state for the resource.
   */
  goal?: {
    /**
     * The type of resource.
     */
    type?: string;
    /**
     * The name for the resource's URN.
     */
    name?: string;
    /**
     * true if this resource is custom, managed by a plugin.
     */
    custom?: boolean;
    /**
     * The resource properties that will be changed.
     */
    inputDiff?: {
      [k: string]: unknown;
    };
    /**
     * The resource outputs that will be changed.
     */
    outputDiff?: {
      [k: string]: unknown;
    };
    /**
     * An optional parent URN for this resource.
     */
    parent?: string;
    /**
     * true to protect this resource from deletion.
     */
    protect?: boolean;
    /**
     * Dependencies of this resource object.
     */
    dependencies?: string[];
    /**
     * The provider to use for this resource.
     */
    provider?: string;
    /**
     * The set of dependencies that affect each property.
     */
    propertyDependencies?: {
      [k: string]: string[];
    };
    /**
     * true if this resource should be deleted prior to replacement.
     */
    deleteBeforeReplace?: boolean;
    /**
     * A list of property names to ignore during changes.
     */
    ignoreChanges?: string[];
    /**
     * Outputs that should always be treated as secrets.
     */
    additionalSecretOutputs?: string[];
    /**
     * Additional URNs that should be aliased to this resource.
     */
    aliases?: string[];
    /**
     * Structured alias objects to be assigned to this resource.
     */
    structuredAliases?: {
      URN?: string;
      Name?: string;
      Type?: string;
      Project?: string;
      Stack?: string;
      Parent?: string;
      NoParent?: boolean;
      [k: string]: unknown;
    }[];
    /**
     * The expected ID of the resource, if any.
     */
    id?: string;
    /**
     * An optional config object for resource options.
     */
    customTimeouts?: {
      create?: number;
      update?: number;
      delete?: number;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * The steps to be performed on the resource.
   */
  steps?: (
    | "same"
    | "create"
    | "update"
    | "delete"
    | "replace"
    | "create-replacement"
    | "delete-replaced"
    | "read"
    | "read-replacement"
    | "refresh"
    | "discard"
    | "discard-replaced"
    | "remove-pending-replace"
    | "import"
    | "import-replacement"
  )[];
  /**
   * The proposed outputs for the resource, if any. Purely advisory.
   */
  state?: {
    [k: string]: unknown;
  };
  /**
   * The random byte seed used for resource goal (base64 encoded).
   */
  seed?: string;
  [k: string]: unknown;
}
